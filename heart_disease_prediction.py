# -*- coding: utf-8 -*-
"""Heart_disease_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ye2RhkF2dmyQ6lZn5urefMi_bDwdSZaO
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

import os
print(os.listdir())

import warnings
warnings.filterwarnings('ignore')

dataset = pd.read_csv("/content/sample_data/heart.csv")

type(dataset)

dataset.shape

dataset.head(5)

dataset.sample(5)

dataset.describe()

dataset.info()

info = ["age","1: male, 0: female","chest pain type, 1: typical angina, 2: atypical angina, 3: non-anginal pain, 4: asymptomatic","resting blood pressure"," serum cholestoral in mg/dl","fasting blood sugar > 120 mg/dl","resting electrocardiographic results (values 0,1,2)"," maximum heart rate achieved","exercise induced angina","oldpeak = ST depression induced by exercise relative to rest","the slope of the peak exercise ST segment","number of major vessels (0-3) colored by flourosopy","thal: 3 = normal; 6 = fixed defect; 7 = reversable defect"]



for i in range(len(info)):
    print(dataset.columns[i]+":\t\t\t"+info[i])

dataset['target'].describe()

dataset['target'].unique()

"""#### Clearly, this is a classification problem, with the target variable having values '0' and '1'"""

print(dataset.corr()["target"].abs().sort_values(ascending=False))

"""#EDA - Exploratory Data Analysis"""

sns.countplot(x = 'target', data = dataset)

target_temp = dataset.target.value_counts()

print(target_temp)

countNoDisease = len(dataset[dataset.target == 0])
countHaveDisease = len(dataset[dataset.target == 1])
print(countNoDisease,countHaveDisease)

dataset["sex"].unique()

sns.barplot(x=dataset["sex"],y=dataset["target"])

"""###females are more likely to have heart problems than males"""

dataset["cp"].unique()

sns.barplot(x=dataset["cp"],y=dataset["target"])

"""### We notice, that chest pain of '0', i.e. the ones with typical angina are much less likely to have heart problems

##FBS feature analysis
"""

dataset["fbs"].describe()

dataset["fbs"].unique()

sns.barplot(x=dataset["fbs"],y=dataset["target"])

"""### Restecg feature analysis"""

dataset["restecg"].unique()

sns.barplot(x=dataset["restecg"],y=dataset["target"])

"""#### We realize that people with restecg '1' and '0' are much more likely to have a heart disease than with restecg '2'

### exang feature analysis
"""

dataset["exang"].unique()

sns.barplot(x=dataset["exang"],y=dataset["target"])

"""#### People with exang=1 i.e. Exercise induced angina are much less likely to have heart problems

### Analysing the Slope feature
"""

dataset["slope"].unique()

sns.barplot(x=dataset["slope"],y=dataset["target"])

"""#### We observe, that Slope '2' causes heart pain much more than Slope '0' and '1'

### ca feature analysis
"""

#number of major vessels (0-3) colored by flourosopy
dataset["ca"].unique()

sns.countplot(x=dataset["ca"])

sns.barplot(x=dataset["ca"],y=dataset["target"])

"""#### ca=4 has astonishingly large number of heart patients

### Analysing the 'thal' feature
"""

dataset["thal"].unique()

sns.barplot(x=dataset["thal"],y=dataset["target"])

sns.distplot(dataset["thal"])

"""#Train Test Split"""

from sklearn.model_selection import train_test_split

predictors = dataset.drop("target",axis=1)
target = dataset["target"]

X_train,X_test,Y_train,Y_test = train_test_split(predictors,target,test_size=0.20,random_state=0)

X_train.shape

X_test.shape

Y_train.shape

Y_test.shape

"""#Model Fitting"""

from sklearn.metrics import accuracy_score

"""###Logistic Regression"""

from sklearn.linear_model import LogisticRegression

lr = LogisticRegression()

lr.fit(X_train,Y_train)

Y_pred_lr = lr.predict(X_test)

Y_pred_lr.shape

score_lr = round(accuracy_score(Y_pred_lr,Y_test)*100,2)

print("The accuracy score achieved using Logistic Regression is: "+str(score_lr)+" %")

from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression(random_state=0)
logreg.fit(X_train , Y_train)

prediction = logreg.predict(X_test)
prediction

print(Y_test)

from sklearn.model_selection import cross_val_score
validation_score=cross_val_score(logreg,X_train,Y_train,scoring='neg_mean_squared_error',cv=3)

validation_score

from sklearn.metrics import mean_absolute_error,mean_squared_error

np.mean(validation_score)

"""###Naive Bayes"""

from sklearn.naive_bayes import GaussianNB

nb = GaussianNB()

nb.fit(X_train,Y_train)

Y_pred_nb = nb.predict(X_test)

Y_pred_nb.shape

score_nb = round(accuracy_score(Y_pred_nb,Y_test)*100,2)

print("The accuracy score achieved using Naive Bayes is: "+str(score_nb)+" %")

"""###SVM"""

from sklearn import svm

sv = svm.SVC(kernel='linear')

sv.fit(X_train, Y_train)

Y_pred_svm = sv.predict(X_test)

Y_pred_svm.shape

score_svm = round(accuracy_score(Y_pred_svm,Y_test)*100,2)

print("The accuracy score achieved using Linear SVM is: "+str(score_svm)+" %")

"""###K Nearest Neighbours"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=7)
knn.fit(X_train,Y_train)
Y_pred_knn=knn.predict(X_test)

Y_pred_knn.shape

score_knn = round(accuracy_score(Y_pred_knn,Y_test)*100,2)

print("The accuracy score achieved using KNN is: "+str(score_knn)+" %")

"""###Decision Tree"""

from sklearn.tree import DecisionTreeClassifier

max_accuracy = 0


for x in range(200):
    dt = DecisionTreeClassifier(random_state=x)
    dt.fit(X_train,Y_train)
    Y_pred_dt = dt.predict(X_test)
    current_accuracy = round(accuracy_score(Y_pred_dt,Y_test)*100,2)
    if(current_accuracy>max_accuracy):
        max_accuracy = current_accuracy
        best_x = x

#print(max_accuracy)
#print(best_x)


dt = DecisionTreeClassifier(random_state=best_x)
dt.fit(X_train,Y_train)
Y_pred_dt = dt.predict(X_test)

print(Y_pred_dt.shape)

score_dt = round(accuracy_score(Y_pred_dt,Y_test)*100,2)

print("The accuracy score achieved using Decision Tree is: "+str(score_dt)+" %")

scores = [score_lr,score_nb,score_svm,score_knn,score_dt]
algorithms = ["Logistic Regression","Naive Bayes","Support Vector Machine","K-Nearest Neighbors","Decision Tree"]

for i in range(len(algorithms)):
    print("The accuracy score achieved using "+algorithms[i]+" is: "+str(scores[i])+" %")

sns.set(rc={'figure.figsize':(15,8)})
plt.xlabel("Algorithms")
plt.ylabel("Accuracy score")

sns.barplot(x=algorithms,y=scores)